
pub const ASCII_MAP: &'static [char; 256] = 
&['\0', '☺', '☻', '♥', '♦', '♣', '♠', '•', '◘', '○', '◙', '♂', '♀', '♪', '♫', '☼', '►', '◄', '↕', '‼', '¶', '§', '▬', '↨', '↑', '↓', '→', '←', '∟', '↔', '▲', '▼', ' ', '!', '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '⌂', 'Ç', 'ü', 'é', 'â', 'ä', 'à', 'å', 'ç', 'ê', 'ë', 'è', 'ï', 'î', 'ì', 'Ä', 'Å', 'É', 'æ', 'Æ', 'ô', 'ö', 'ò', 'û', 'ù', 'ÿ', 'Ö', 'Ü', '¢', '£', '¥', '₧', 'ƒ', 'á', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ª', 'º', '¿', '⌐', '¬', '½', '¼', '¡', '«', '»', '░', '▒', '▓', '│', '┤', '╡', '╢', '╖', '╕', '╣', '║', '╗', '╝', '╜', '╛', '┐', '└', '┴', '┬', '├', '─', '┼', '╞', '╟', '╚', '╔', '╩', '╦', '╠', '═', '╬', '╧', '╨', '╤', '╥', '╙', '╘', '╒', '╓', '╫', '╪', '┘', '┌', '█', '▄', '▌', '▐', '▀', 'α', 'ß', 'Γ', 'π', 'Σ', 'σ', 'µ', 'τ', 'Φ', 'Θ', 'Ω', 'δ', '∞', 'φ', 'ε', '∩', '≡', '±', '≥', '≤', '⌠', '⌡', '÷', '≈', '°', '∙', '·', '√', 'ⁿ', '²', '■', ' '];

/// Representation of a codepage 437 character with methods for converting unicode symbols into and out of the codepage
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub struct VGAChar(pub u8);

impl VGAChar {
    /// Convert a VGAChar to a regular char to render it at the terminal
    pub const fn to_char(self) -> char {
        ASCII_MAP[self.0 as usize]
    }

    /// Convert a character to a VGAChar, used to convert text into a format allowable on screen
    pub const fn from_char(c: char) -> Option<Self> {
        match c {
            '\0' => Some(VGAChar(0)),
            '☺' => Some(VGAChar(1)),
            '☻' => Some(VGAChar(2)),
            '♥' => Some(VGAChar(3)),
            '♦' => Some(VGAChar(4)),
            '♣' => Some(VGAChar(5)),
            '♠' => Some(VGAChar(6)),
            '•' => Some(VGAChar(7)),
            '◘' => Some(VGAChar(8)),
            '○' => Some(VGAChar(9)),
            '◙' => Some(VGAChar(10)),
            '♂' => Some(VGAChar(11)),
            '♀' => Some(VGAChar(12)),
            '♪' => Some(VGAChar(13)),
            '♫' => Some(VGAChar(14)),
            '☼' => Some(VGAChar(15)),
            '►' => Some(VGAChar(16)),
            '◄' => Some(VGAChar(17)),
            '↕' => Some(VGAChar(18)),
            '‼' => Some(VGAChar(19)),
            '¶' => Some(VGAChar(20)),
            '§' => Some(VGAChar(21)),
            '▬' => Some(VGAChar(22)),
            '↨' => Some(VGAChar(23)),
            '↑' => Some(VGAChar(24)),
            '↓' => Some(VGAChar(25)),
            '→' => Some(VGAChar(26)),
            '←' => Some(VGAChar(27)),
            '∟' => Some(VGAChar(28)),
            '↔' => Some(VGAChar(29)),
            '▲' => Some(VGAChar(30)),
            '▼' => Some(VGAChar(31)),
            ' ' => Some(VGAChar(32)),
            '!' => Some(VGAChar(33)),
            '"' => Some(VGAChar(34)),
            '#' => Some(VGAChar(35)),
            '$' => Some(VGAChar(36)),
            '%' => Some(VGAChar(37)),
            '&' => Some(VGAChar(38)),
            '\'' => Some(VGAChar(39)),
            '(' => Some(VGAChar(40)),
            ')' => Some(VGAChar(41)),
            '*' => Some(VGAChar(42)),
            '+' => Some(VGAChar(43)),
            ',' => Some(VGAChar(44)),
            '-' => Some(VGAChar(45)),
            '.' => Some(VGAChar(46)),
            '/' => Some(VGAChar(47)),
            '0' => Some(VGAChar(48)),
            '1' => Some(VGAChar(49)),
            '2' => Some(VGAChar(50)),
            '3' => Some(VGAChar(51)),
            '4' => Some(VGAChar(52)),
            '5' => Some(VGAChar(53)),
            '6' => Some(VGAChar(54)),
            '7' => Some(VGAChar(55)),
            '8' => Some(VGAChar(56)),
            '9' => Some(VGAChar(57)),
            ':' => Some(VGAChar(58)),
            ';' => Some(VGAChar(59)),
            '<' => Some(VGAChar(60)),
            '=' => Some(VGAChar(61)),
            '>' => Some(VGAChar(62)),
            '?' => Some(VGAChar(63)),
            '@' => Some(VGAChar(64)),
            'A' => Some(VGAChar(65)),
            'B' => Some(VGAChar(66)),
            'C' => Some(VGAChar(67)),
            'D' => Some(VGAChar(68)),
            'E' => Some(VGAChar(69)),
            'F' => Some(VGAChar(70)),
            'G' => Some(VGAChar(71)),
            'H' => Some(VGAChar(72)),
            'I' => Some(VGAChar(73)),
            'J' => Some(VGAChar(74)),
            'K' => Some(VGAChar(75)),
            'L' => Some(VGAChar(76)),
            'M' => Some(VGAChar(77)),
            'N' => Some(VGAChar(78)),
            'O' => Some(VGAChar(79)),
            'P' => Some(VGAChar(80)),
            'Q' => Some(VGAChar(81)),
            'R' => Some(VGAChar(82)),
            'S' => Some(VGAChar(83)),
            'T' => Some(VGAChar(84)),
            'U' => Some(VGAChar(85)),
            'V' => Some(VGAChar(86)),
            'W' => Some(VGAChar(87)),
            'X' => Some(VGAChar(88)),
            'Y' => Some(VGAChar(89)),
            'Z' => Some(VGAChar(90)),
            '[' => Some(VGAChar(91)),
            '\\' => Some(VGAChar(92)),
            ']' => Some(VGAChar(93)),
            '^' => Some(VGAChar(94)),
            '_' => Some(VGAChar(95)),
            '`' => Some(VGAChar(96)),
            'a' => Some(VGAChar(97)),
            'b' => Some(VGAChar(98)),
            'c' => Some(VGAChar(99)),
            'd' => Some(VGAChar(100)),
            'e' => Some(VGAChar(101)),
            'f' => Some(VGAChar(102)),
            'g' => Some(VGAChar(103)),
            'h' => Some(VGAChar(104)),
            'i' => Some(VGAChar(105)),
            'j' => Some(VGAChar(106)),
            'k' => Some(VGAChar(107)),
            'l' => Some(VGAChar(108)),
            'm' => Some(VGAChar(109)),
            'n' => Some(VGAChar(110)),
            'o' => Some(VGAChar(111)),
            'p' => Some(VGAChar(112)),
            'q' => Some(VGAChar(113)),
            'r' => Some(VGAChar(114)),
            's' => Some(VGAChar(115)),
            't' => Some(VGAChar(116)),
            'u' => Some(VGAChar(117)),
            'v' => Some(VGAChar(118)),
            'w' => Some(VGAChar(119)),
            'x' => Some(VGAChar(120)),
            'y' => Some(VGAChar(121)),
            'z' => Some(VGAChar(122)),
            '{' => Some(VGAChar(123)),
            '|' => Some(VGAChar(124)),
            '}' => Some(VGAChar(125)),
            '~' => Some(VGAChar(126)),
            '⌂' => Some(VGAChar(127)),
            'Ç' => Some(VGAChar(128)),
            'ü' => Some(VGAChar(129)),
            'é' => Some(VGAChar(130)),
            'â' => Some(VGAChar(131)),
            'ä' => Some(VGAChar(132)),
            'à' => Some(VGAChar(133)),
            'å' => Some(VGAChar(134)),
            'ç' => Some(VGAChar(135)),
            'ê' => Some(VGAChar(136)),
            'ë' => Some(VGAChar(137)),
            'è' => Some(VGAChar(138)),
            'ï' => Some(VGAChar(139)),
            'î' => Some(VGAChar(140)),
            'ì' => Some(VGAChar(141)),
            'Ä' => Some(VGAChar(142)),
            'Å' => Some(VGAChar(143)),
            'É' => Some(VGAChar(144)),
            'æ' => Some(VGAChar(145)),
            'Æ' => Some(VGAChar(146)),
            'ô' => Some(VGAChar(147)),
            'ö' => Some(VGAChar(148)),
            'ò' => Some(VGAChar(149)),
            'û' => Some(VGAChar(150)),
            'ù' => Some(VGAChar(151)),
            'ÿ' => Some(VGAChar(152)),
            'Ö' => Some(VGAChar(153)),
            'Ü' => Some(VGAChar(154)),
            '¢' => Some(VGAChar(155)),
            '£' => Some(VGAChar(156)),
            '¥' => Some(VGAChar(157)),
            '₧' => Some(VGAChar(158)),
            'ƒ' => Some(VGAChar(159)),
            'á' => Some(VGAChar(160)),
            'í' => Some(VGAChar(161)),
            'ó' => Some(VGAChar(162)),
            'ú' => Some(VGAChar(163)),
            'ñ' => Some(VGAChar(164)),
            'Ñ' => Some(VGAChar(165)),
            'ª' => Some(VGAChar(166)),
            'º' => Some(VGAChar(167)),
            '¿' => Some(VGAChar(168)),
            '⌐' => Some(VGAChar(169)),
            '¬' => Some(VGAChar(170)),
            '½' => Some(VGAChar(171)),
            '¼' => Some(VGAChar(172)),
            '¡' => Some(VGAChar(173)),
            '«' => Some(VGAChar(174)),
            '»' => Some(VGAChar(175)),
            '░' => Some(VGAChar(176)),
            '▒' => Some(VGAChar(177)),
            '▓' => Some(VGAChar(178)),
            '│' => Some(VGAChar(179)),
            '┤' => Some(VGAChar(180)),
            '╡' => Some(VGAChar(181)),
            '╢' => Some(VGAChar(182)),
            '╖' => Some(VGAChar(183)),
            '╕' => Some(VGAChar(184)),
            '╣' => Some(VGAChar(185)),
            '║' => Some(VGAChar(186)),
            '╗' => Some(VGAChar(187)),
            '╝' => Some(VGAChar(188)),
            '╜' => Some(VGAChar(189)),
            '╛' => Some(VGAChar(190)),
            '┐' => Some(VGAChar(191)),
            '└' => Some(VGAChar(192)),
            '┴' => Some(VGAChar(193)),
            '┬' => Some(VGAChar(194)),
            '├' => Some(VGAChar(195)),
            '─' => Some(VGAChar(196)),
            '┼' => Some(VGAChar(197)),
            '╞' => Some(VGAChar(198)),
            '╟' => Some(VGAChar(199)),
            '╚' => Some(VGAChar(200)),
            '╔' => Some(VGAChar(201)),
            '╩' => Some(VGAChar(202)),
            '╦' => Some(VGAChar(203)),
            '╠' => Some(VGAChar(204)),
            '═' => Some(VGAChar(205)),
            '╬' => Some(VGAChar(206)),
            '╧' => Some(VGAChar(207)),
            '╨' => Some(VGAChar(208)),
            '╤' => Some(VGAChar(209)),
            '╥' => Some(VGAChar(210)),
            '╙' => Some(VGAChar(211)),
            '╘' => Some(VGAChar(212)),
            '╒' => Some(VGAChar(213)),
            '╓' => Some(VGAChar(214)),
            '╫' => Some(VGAChar(215)),
            '╪' => Some(VGAChar(216)),
            '┘' => Some(VGAChar(217)),
            '┌' => Some(VGAChar(218)),
            '█' => Some(VGAChar(219)),
            '▄' => Some(VGAChar(220)),
            '▌' => Some(VGAChar(221)),
            '▐' => Some(VGAChar(222)),
            '▀' => Some(VGAChar(223)),
            'α' => Some(VGAChar(224)),
            'ß' => Some(VGAChar(225)),
            'Γ' => Some(VGAChar(226)),
            'π' => Some(VGAChar(227)),
            'Σ' => Some(VGAChar(228)),
            'σ' => Some(VGAChar(229)),
            'µ' => Some(VGAChar(230)),
            'τ' => Some(VGAChar(231)),
            'Φ' => Some(VGAChar(232)),
            'Θ' => Some(VGAChar(233)),
            'Ω' => Some(VGAChar(234)),
            'δ' => Some(VGAChar(235)),
            '∞' => Some(VGAChar(236)),
            'φ' => Some(VGAChar(237)),
            'ε' => Some(VGAChar(238)),
            '∩' => Some(VGAChar(239)),
            '≡' => Some(VGAChar(240)),
            '±' => Some(VGAChar(241)),
            '≥' => Some(VGAChar(242)),
            '≤' => Some(VGAChar(243)),
            '⌠' => Some(VGAChar(244)),
            '⌡' => Some(VGAChar(245)),
            '÷' => Some(VGAChar(246)),
            '≈' => Some(VGAChar(247)),
            '°' => Some(VGAChar(248)),
            '∙' => Some(VGAChar(249)),
            '·' => Some(VGAChar(250)),
            '√' => Some(VGAChar(251)),
            'ⁿ' => Some(VGAChar(252)),
            '²' => Some(VGAChar(253)),
            '■' => Some(VGAChar(254)),
            _ => None
        }
    }
}

impl std::convert::Into<char> for VGAChar {
    fn into(self) -> char {
        ASCII_MAP[self.0 as usize]
    }
}

impl std::convert::TryInto<VGAChar> for char {
    type Error = char;

    fn try_into(self) -> Result<VGAChar, Self::Error> {
        VGAChar::from_char(self).ok_or(self)
    }
}

/// Colors for the characters in the ascii display
#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum CharacterColor {
    Black,
    Blue,
    Green,
    Cyan,
    Red,
    Magenta,
    Brown,
    White,
    Gray,
    LightBlue,
    LightGreen,
    LightCyan,
    LightRed,
    LightMagenta,
    Yellow,
    BrightWhite
}

impl std::convert::From<&CharacterColor> for (u8, u8, u8) {
    fn from(c: &CharacterColor) -> Self {
        match c {
            CharacterColor::Black => (0, 0, 0),
            CharacterColor::Blue => (0, 0, 176),
            CharacterColor::Green => (0, 176, 0),
            CharacterColor::Cyan => (0, 176, 176),
            CharacterColor::Red => (176, 0, 0),
            CharacterColor::Magenta => (176, 0, 176),
            CharacterColor::Brown => (176, 96, 0),
            CharacterColor::White => (176, 176, 176),
            CharacterColor::Gray => (96, 96, 96),
            CharacterColor::LightBlue => (96, 96, 255),
            CharacterColor::LightGreen => (96, 255, 96),
            CharacterColor::LightCyan => (96, 255, 255),
            CharacterColor::LightRed => (255, 96, 96),
            CharacterColor::LightMagenta => (255, 0, 255),
            CharacterColor::Yellow => (255, 255, 96),
            CharacterColor::BrightWhite => (255, 255, 255),
        }
    }
}